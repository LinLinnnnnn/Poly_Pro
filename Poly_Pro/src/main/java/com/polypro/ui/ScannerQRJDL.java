/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.polypro.ui;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.polypro.dao.NhanVienDAO;
import com.polypro.entity.NhanVien;
import com.polypro.utils.Auth;
import com.polypro.utils.MsgBox;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;

/**
 *
 * @author MY LINH
 */
public class ScannerQRJDL extends javax.swing.JDialog implements Runnable, ThreadFactory {

 
    java.awt.Frame parent = null;

    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private String user_pass = "";
    private Executor executor = Executors.newSingleThreadExecutor();

    /**
     * Creates new form QR
     *
     * @param parent
     * @param modal
     */
    public ScannerQRJDL(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initWebcam();

    }

//    public void close() {
//        this.dispose();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelcam = new javax.swing.JPanel();
        pn = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpanelcam.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jpanelcam.add(pn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 360));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpanelcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpanelcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        webcam.close();

    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScannerQRJDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScannerQRJDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScannerQRJDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScannerQRJDL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScannerQRJDL dialog = new ScannerQRJDL(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpanelcam;
    private javax.swing.JPanel pn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;

            if (webcam != null && webcam.isOpen()) { // Kiểm tra webcam không null và đã mở
                image = webcam.getImage();
                if (image == null) {
                    continue;
                }
            } else {
                return;
            }

            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException e) {
                // No result...
            }

            if (result != null) {
                System.out.println(result.getText());
                user_pass = result.getText();
                login();
            }

        } while (true);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }

    private void initWebcam() {
        try {
            Dimension size = WebcamResolution.VGA.getSize();
            webcam = Webcam.getWebcams().get(0);
            webcam.setViewSize(size);
            panel = new WebcamPanel(webcam);
            panel.setPreferredSize(size);
            panel.setFPSDisplayed(true);
            jpanelcam.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 360));
            executor.execute(this);
        } catch (Exception e) {
            MsgBox.alert(this, "Không tìm thấy webcam!!");
            return;
        }
    }

    public void login() {

        if (!"".equals(user_pass)) {
            String find = ".byLinh";
            int position = user_pass.indexOf(find);
            String pass = "";
            String user = "";
            if (position >= 0) {
                pass = user_pass.substring(position + 7); // Tách từ vị trí sau '|'
                user = user_pass.substring(0, position); // Tách từ đầu đến vị trí '|'
                System.out.println("User: " + user);
                System.out.println("Password: " + pass);
            } else {
                System.out.println("Không tìm thấy '.' trong chuỗi.");
            }
            NhanVien nv = new NhanVienDAO().selectByid(user);

            if (nv != null) {
                if (pass.equals(nv.getMatKhau())) {
                    MsgBox.alert(this, "Đăng Nhập Thành Công");
                    Auth.user = nv;
                    webcam.close();
                    WebcamPanel panel = null;
                    Webcam webcam = null;
                    String user_pass = "";
                    this.dispose();
                } else {
                    MsgBox.alert(this, "Sai Mật Khẩu");
                }
            } else {
                MsgBox.alert(this, "Tên Đang Nhập Không Tồn Tại");

            }

        }

    }

}
